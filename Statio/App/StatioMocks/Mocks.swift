///
/// @Generated by Mockolo
///



import AppFoundation
import Charts
import Combine
import CombineExt
import CoreData
import CoreGraphics
import Countly
import Foundation
import Logging
import NeedleFoundation
import Ombi
import SnapKit
import StatioKit
import UIKit
import os
@testable import Analytics
@testable import ShortRibs
@testable import Statio
#if canImport(CoreData)
import CoreData
import Foundation
#endif


class ByteFormattingMock: ByteFormatting {
    init() { }


    private(set) var formattedBytesForDiskCallCount = 0
    var formattedBytesForDiskHandler: ((UInt64) -> (String))?
    func formattedBytesForDisk(_ bytes: UInt64) -> String {
        formattedBytesForDiskCallCount += 1
        if let formattedBytesForDiskHandler = formattedBytesForDiskHandler {
            return formattedBytesForDiskHandler(bytes)
        }
        return ""
    }

    private(set) var formattedBytesForMemoryCallCount = 0
    var formattedBytesForMemoryHandler: ((UInt64) -> (String))?
    func formattedBytesForMemory(_ bytes: UInt64) -> String {
        formattedBytesForMemoryCallCount += 1
        if let formattedBytesForMemoryHandler = formattedBytesForMemoryHandler {
            return formattedBytesForMemoryHandler(bytes)
        }
        return ""
    }
}

class DeviceBoardUpdateProvidingMock: DeviceBoardUpdateProviding {
    init() { }
    init(host: String = "", path: String = "") {
        self.host = host
        self.path = path
    }


    private(set) var hostSetCallCount = 0
    var host: String = "" { didSet { hostSetCallCount += 1 } }

    private(set) var pathSetCallCount = 0
    var path: String = "" { didSet { pathSetCallCount += 1 } }
}

class DeviceModelUpdateProvidingMock: DeviceModelUpdateProviding {
    init() { }
    init(host: String = "", path: String = "") {
        self.host = host
        self.path = path
    }


    private(set) var hostSetCallCount = 0
    var host: String = "" { didSet { hostSetCallCount += 1 } }

    private(set) var pathSetCallCount = 0
    var path: String = "" { didSet { pathSetCallCount += 1 } }
}

class MonitorTitleProvidingMock: MonitorTitleProviding {
    init() { }


    private(set) var titleCallCount = 0
    var titleHandler: ((MonitorIdentifier) -> (String))?
    func title(for identifier: MonitorIdentifier) -> String {
        titleCallCount += 1
        if let titleHandler = titleHandler {
            return titleHandler(identifier)
        }
        return ""
    }
}

class ResourceProvidingMock: ResourceProviding {
    init() { }


    private(set) var urlCallCount = 0
    var urlHandler: ((String, String) -> (URL?))?
    func url(forResource name: String, type: String) -> URL? {
        urlCallCount += 1
        if let urlHandler = urlHandler {
            return urlHandler(name, type)
        }
        return nil
    }

    private(set) var dataCallCount = 0
    var dataHandler: ((URL) -> (Data?))?
    func data(forURL url: URL) -> Data? {
        dataCallCount += 1
        if let dataHandler = dataHandler {
            return dataHandler(url)
        }
        return nil
    }
}

public class PresentableInteractableMock: PresentableInteractable {
    public init() { }
    public init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class BatteryDataSourceMock: BatteryDataSource {
    init() { }


    private(set) var applyCallCount = 0
    var applyHandler: ((NSDiffableDataSourceSnapshot<Int, BatteryRow>) -> ())?
    func apply(_ snapshot: NSDiffableDataSourceSnapshot<Int, BatteryRow>)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(snapshot)
        }
        
    }
}

class DeviceIdentityDataSourceMock: DeviceIdentityDataSource {
    init() { }


    private(set) var applyCallCount = 0
    var applyHandler: ((NSDiffableDataSourceSnapshot<DeviceIdentityCategory, DeviceIdentityRow>) -> ())?
    func apply(_ snapshot: NSDiffableDataSourceSnapshot<DeviceIdentityCategory, DeviceIdentityRow>)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(snapshot)
        }
        
    }
}

class MonitorListDataSourceMock: MonitorListDataSource {
    init() { }


    private(set) var itemIdentifierCallCount = 0
    var itemIdentifierHandler: ((IndexPath) -> (MonitorListRow?))?
    func itemIdentifier(for indexPath: IndexPath) -> MonitorListRow? {
        itemIdentifierCallCount += 1
        if let itemIdentifierHandler = itemIdentifierHandler {
            return itemIdentifierHandler(indexPath)
        }
        return nil
    }

    private(set) var applyCallCount = 0
    var applyHandler: ((NSDiffableDataSourceSnapshot<MonitorCategoryIdentifier, MonitorListRow>) -> ())?
    func apply(_ snapshot: NSDiffableDataSourceSnapshot<MonitorCategoryIdentifier, MonitorListRow>)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(snapshot)
        }
        
    }
}

class DiskSnapshotStreamingMock: DiskSnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<DiskSnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<DiskSnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<DiskSnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }
}

public class InteractableMock: Interactable {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

public class WorkableMock: Workable {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }
}

class BatteryProvidingMock: BatteryProviding {
    init() { }
    init(state: Battery.State, level: Battery.Level) {
        self._state = state
        self._level = level
    }


    private(set) var stateSetCallCount = 0
    private var _state: Battery.State!  { didSet { stateSetCallCount += 1 } }
    var state: Battery.State {
        get { return _state }
        set { _state = newValue }
    }

    private(set) var levelSetCallCount = 0
    private var _level: Battery.Level!  { didSet { levelSetCallCount += 1 } }
    var level: Battery.Level {
        get { return _level }
        set { _level = newValue }
    }
}

class CellularPresentableMock: CellularPresentable {
    init() { }
    init(listener: CellularPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: CellularPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class DeviceBoardStorageWorkingMock: DeviceBoardStorageWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class DeviceModelStorageWorkingMock: DeviceModelStorageWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class DeviceModelStoringMock: DeviceModelStoring {
    init() { }


    private(set) var retrieveCachedModelsCallCount = 0
    var retrieveCachedModelsHandler: (() throws -> ([DeviceModel]))?
    func retrieveCachedModels() throws -> [DeviceModel] {
        retrieveCachedModelsCallCount += 1
        if let retrieveCachedModelsHandler = retrieveCachedModelsHandler {
            return try retrieveCachedModelsHandler()
        }
        return [DeviceModel]()
    }
}

class DiskPresentableMock: DiskPresentable {
    init() { }
    init(listener: DiskPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: DiskPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var presentCallCount = 0
    var presentHandler: ((DiskSnapshot) -> ())?
    func present(snapshot: DiskSnapshot)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(snapshot)
        }
        
    }
}

class MemoryProvidingMock: MemoryProviding {
    init() { }


    private(set) var recordCallCount = 0
    var recordHandler: (() throws -> (Memory.Usage))?
    func record() throws -> Memory.Usage {
        recordCallCount += 1
        if let recordHandler = recordHandler {
            return try recordHandler()
        }
        fatalError("recordHandler returns can't have a default value thus its handler must be set")
    }
}

class MonitorListPresentableMock: MonitorListPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: MonitorListPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: MonitorListPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var applyIdentifiersCallCount = 0
    var applyIdentifiersHandler: (([MonitorIdentifier], [MonitorCategoryIdentifier]) -> ())?
    func applyIdentifiers(_ identifiers: [MonitorIdentifier], categories: [MonitorCategoryIdentifier])  {
        applyIdentifiersCallCount += 1
        if let applyIdentifiersHandler = applyIdentifiersHandler {
            applyIdentifiersHandler(identifiers, categories)
        }
        
    }
}

class ProcessorMonitorWorkingMock: ProcessorMonitorWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class ProcessorPresentableMock: ProcessorPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: ProcessorPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: ProcessorPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var presentCallCount = 0
    var presentHandler: ((ProcessorSnapshot) -> ())?
    func present(snapshot: ProcessorSnapshot)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(snapshot)
        }
        
    }
}

class ProcessorProvidingMock: ProcessorProviding {
    init() { }


    private(set) var recordCallCount = 0
    var recordHandler: (() throws -> (Processor.Usage))?
    func record() throws -> Processor.Usage {
        recordCallCount += 1
        if let recordHandler = recordHandler {
            return try recordHandler()
        }
        fatalError("recordHandler returns can't have a default value thus its handler must be set")
    }
}

class ReporterPresentableMock: ReporterPresentable {
    init() { }
    init(listener: ReporterPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: ReporterPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class SettingsPresentableMock: SettingsPresentable {
    init() { }
    init(listener: SettingsPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: SettingsPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class WiFiPresentableMock: WiFiPresentable {
    init() { }
    init(listener: WiFiPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: WiFiPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

public class ViewControllableMock: ViewControllable {
    public init() { }
    public init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

public class ViewableMock: Viewable {
    public init() { }
    public init(uiview: UIView = UIView(frame: .zero)) {
        self.uiview = uiview
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }
}

class BatteryCollectionViewableMock: BatteryCollectionViewable {
    init() { }
    init(uiview: UIView = UIView(frame: .zero), delegate: UICollectionViewDelegate? = nil) {
        self.uiview = uiview
        self.delegate = delegate
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: UICollectionViewDelegate? = nil { didSet { delegateSetCallCount += 1 } }
}

class BatteryMonitorWorkingMock: BatteryMonitorWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class DeviceIdentityCollectionViewableMock: DeviceIdentityCollectionViewable {
    init() { }
    init(uiview: UIView = UIView(frame: .zero), delegate: UICollectionViewDelegate? = nil) {
        self.uiview = uiview
        self.delegate = delegate
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: UICollectionViewDelegate? = nil { didSet { delegateSetCallCount += 1 } }
}

class DeviceProvidingMock: DeviceProviding {
    init() { }
    init(deviceName: String = "", modelIdentifier: String = "", os: String = "", version: String = "") {
        self.deviceName = deviceName
        self.modelIdentifier = modelIdentifier
        self.os = os
        self.version = version
    }


    private(set) var deviceNameSetCallCount = 0
    var deviceName: String = "" { didSet { deviceNameSetCallCount += 1 } }

    private(set) var modelIdentifierSetCallCount = 0
    var modelIdentifier: String = "" { didSet { modelIdentifierSetCallCount += 1 } }

    private(set) var osSetCallCount = 0
    var os: String = "" { didSet { osSetCallCount += 1 } }

    private(set) var versionSetCallCount = 0
    var version: String = "" { didSet { versionSetCallCount += 1 } }
}

class DiskListCollectionViewableMock: DiskListCollectionViewable {
    init() { }
    init(uiview: UIView = UIView(frame: .zero), contentOffset: CGPoint = .zero, delegate: UICollectionViewDelegate? = nil) {
        self.uiview = uiview
        self.contentOffset = contentOffset
        self.delegate = delegate
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    private(set) var contentOffsetSetCallCount = 0
    var contentOffset: CGPoint = .zero { didSet { contentOffsetSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: UICollectionViewDelegate? = nil { didSet { delegateSetCallCount += 1 } }
}

class MemoryListCollectionViewableMock: MemoryListCollectionViewable {
    init() { }
    init(uiview: UIView = UIView(frame: .zero), contentOffset: CGPoint = .zero, delegate: UICollectionViewDelegate? = nil) {
        self.uiview = uiview
        self.contentOffset = contentOffset
        self.delegate = delegate
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    private(set) var contentOffsetSetCallCount = 0
    var contentOffset: CGPoint = .zero { didSet { contentOffsetSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: UICollectionViewDelegate? = nil { didSet { delegateSetCallCount += 1 } }
}

class MonitorListCollectionViewableMock: MonitorListCollectionViewable {
    init() { }
    init(uiview: UIView = UIView(frame: .zero), delegate: UICollectionViewDelegate? = nil) {
        self.uiview = uiview
        self.delegate = delegate
    }


    public private(set) var uiviewSetCallCount = 0
    public var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    private(set) var delegateSetCallCount = 0
    var delegate: UICollectionViewDelegate? = nil { didSet { delegateSetCallCount += 1 } }
}

class DeviceBoardStoringMock: DeviceBoardStoring {
    init() { }


    private(set) var retrieveCachedBoardsCallCount = 0
    var retrieveCachedBoardsHandler: (() throws -> ([DeviceBoard]))?
    func retrieveCachedBoards() throws -> [DeviceBoard] {
        retrieveCachedBoardsCallCount += 1
        if let retrieveCachedBoardsHandler = retrieveCachedBoardsHandler {
            return try retrieveCachedBoardsHandler()
        }
        return [DeviceBoard]()
    }
}

class DiskMonitorWorkingMock: DiskMonitorWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class MemorySnapshotStreamingMock: MemorySnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<MemorySnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<MemorySnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<MemorySnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }
}

class MonitorPresentableMock: MonitorPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: MonitorPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: MonitorPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var showListCallCount = 0
    var showListHandler: ((MonitorListViewControllable) -> ())?
    func showList(_ monitorList: MonitorListViewControllable)  {
        showListCallCount += 1
        if let showListHandler = showListHandler {
            showListHandler(monitorList)
        }
        
    }

    private(set) var showMonitorCallCount = 0
    var showMonitorHandler: ((ViewControllable) -> ())?
    func showMonitor(_ viewController: ViewControllable)  {
        showMonitorCallCount += 1
        if let showMonitorHandler = showMonitorHandler {
            showMonitorHandler(viewController)
        }
        
    }
}

class AppStateProvidingMock: AppStateProviding {
    init() { }
    init(state: AnyPublisher<AppState, Never>) {
        self._state = state
    }


    private(set) var stateSetCallCount = 0
    private var _state: AnyPublisher<AppState, Never>!  { didSet { stateSetCallCount += 1 } }
    var state: AnyPublisher<AppState, Never> {
        get { return _state }
        set { _state = newValue }
    }
}

class DeviceBoardStreamingMock: DeviceBoardStreaming {
    init() { }
    init(boards: AnyPublisher<[DeviceBoard], Never>) {
        self._boards = boards
    }


    private(set) var boardsSetCallCount = 0
    private var _boards: AnyPublisher<[DeviceBoard], Never>!  { didSet { boardsSetCallCount += 1 } }
    var boards: AnyPublisher<[DeviceBoard], Never> {
        get { return _boards }
        set { _boards = newValue }
    }
}

class MonitorIconProvidingMock: MonitorIconProviding {
    init() { }


    private(set) var drawIconCallCount = 0
    var drawIconHandler: ((MonitorIdentifier, CGRect, UIColor, MonitorIconProvider.ResizingBehavior) -> ())?
    func drawIcon(forIdentifier identifier: MonitorIdentifier, targetFrame: CGRect, color: UIColor, resizing: MonitorIconProvider.ResizingBehavior)  {
        drawIconCallCount += 1
        if let drawIconHandler = drawIconHandler {
            drawIconHandler(identifier, targetFrame, color, resizing)
        }
        
    }

    private(set) var imageCallCount = 0
    var imageHandler: ((MonitorIdentifier, CGSize, UIColor) -> (UIImage))?
    func image(forIdentifier identifier: MonitorIdentifier, size: CGSize, color: UIColor) -> UIImage {
        imageCallCount += 1
        if let imageHandler = imageHandler {
            return imageHandler(identifier, size, color)
        }
        return UIImage()
    }
}

class ProcessorSnapshotStreamingMock: ProcessorSnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<ProcessorSnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<ProcessorSnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<ProcessorSnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }
}

public class DeviceModelStreamingMock: DeviceModelStreaming {
    public init() { }
    public init(models: AnyPublisher<[DeviceModel], Never>) {
        self._models = models
    }


    public private(set) var modelsSetCallCount = 0
    private var _models: AnyPublisher<[DeviceModel], Never>!  { didSet { modelsSetCallCount += 1 } }
    public var models: AnyPublisher<[DeviceModel], Never> {
        get { return _models }
        set { _models = newValue }
    }
}

class BatteryPresentableMock: BatteryPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: BatteryPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: BatteryPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var updateCallCount = 0
    var updateHandler: ((Battery.Level) -> ())?
    func update(level: Battery.Level)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(level)
        }
        
    }

    private(set) var updateStateCallCount = 0
    var updateStateHandler: ((Battery.State) -> ())?
    func update(state: Battery.State)  {
        updateStateCallCount += 1
        if let updateStateHandler = updateStateHandler {
            updateStateHandler(state)
        }
        
    }
}

class CellularViewControllableMock: CellularViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MemoryMonitorWorkingMock: MemoryMonitorWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class MemoryPresentableMock: MemoryPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: MemoryPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: MemoryPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var presentCallCount = 0
    var presentHandler: ((MemorySnapshot) -> ())?
    func present(snapshot: MemorySnapshot)  {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(snapshot)
        }
        
    }
}

class RootPresentableMock: RootPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: RootPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: RootPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var showMainCallCount = 0
    var showMainHandler: ((ViewControllable) -> ())?
    func showMain(_ viewControllable: ViewControllable)  {
        showMainCallCount += 1
        if let showMainHandler = showMainHandler {
            showMainHandler(viewControllable)
        }
        
    }
}

class DiskListDataSourceMock: DiskListDataSource {
    init() { }


    private(set) var applyCallCount = 0
    var applyHandler: ((NSDiffableDataSourceSnapshot<DiskListSection, DiskListRow>) -> ())?
    func apply(_ snapshot: NSDiffableDataSourceSnapshot<DiskListSection, DiskListRow>)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(snapshot)
        }
        
    }
}

class MemoryListDataSourceMock: MemoryListDataSource {
    init() { }


    private(set) var applyCallCount = 0
    var applyHandler: ((NSDiffableDataSourceSnapshot<MemoryListSection, MemoryListRow>) -> ())?
    func apply(_ snapshot: NSDiffableDataSourceSnapshot<MemoryListSection, MemoryListRow>)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(snapshot)
        }
        
    }
}

class DiskViewControllableMock: DiskViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MonitorViewControllableMock: MonitorViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ProcessorViewControllableMock: ProcessorViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ReporterViewControllableMock: ReporterViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class SettingsViewControllableMock: SettingsViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class WiFiViewControllableMock: WiFiViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

public class PersistentContainingMock: PersistentContaining {
    public init() { }
    public init(name: String = "", managedObejctModel: NSManagedObjectModel, persistentStoreCoordinator: NSPersistentStoreCoordinator, viewContext: NSManagedObjectContext) {
        self.name = name
        self._managedObejctModel = managedObejctModel
        self._persistentStoreCoordinator = persistentStoreCoordinator
        self._viewContext = viewContext
    }


    public private(set) var nameSetCallCount = 0
    public var name: String = "" { didSet { nameSetCallCount += 1 } }

    public private(set) var managedObejctModelSetCallCount = 0
    private var _managedObejctModel: NSManagedObjectModel!  { didSet { managedObejctModelSetCallCount += 1 } }
    public var managedObejctModel: NSManagedObjectModel {
        get { return _managedObejctModel }
        set { _managedObejctModel = newValue }
    }

    public private(set) var persistentStoreCoordinatorSetCallCount = 0
    private var _persistentStoreCoordinator: NSPersistentStoreCoordinator!  { didSet { persistentStoreCoordinatorSetCallCount += 1 } }
    public var persistentStoreCoordinator: NSPersistentStoreCoordinator {
        get { return _persistentStoreCoordinator }
        set { _persistentStoreCoordinator = newValue }
    }

    public private(set) var viewContextSetCallCount = 0
    private var _viewContext: NSManagedObjectContext!  { didSet { viewContextSetCallCount += 1 } }
    public var viewContext: NSManagedObjectContext {
        get { return _viewContext }
        set { _viewContext = newValue }
    }

    public private(set) var createBackgroundContextCallCount = 0
    public var createBackgroundContextHandler: (() -> (NSManagedObjectContext))?
    public func createBackgroundContext() -> NSManagedObjectContext {
        createBackgroundContextCallCount += 1
        if let createBackgroundContextHandler = createBackgroundContextHandler {
            return createBackgroundContextHandler()
        }
        fatalError("createBackgroundContextHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var saveContextCallCount = 0
    public var saveContextHandler: (() throws -> ())?
    public func saveContext() throws  {
        saveContextCallCount += 1
        if let saveContextHandler = saveContextHandler {
            try saveContextHandler()
        }
        
    }
}

class BatteryLevelStreamingMock: BatteryLevelStreaming {
    init() { }
    init(batteryLevel: AnyPublisher<Battery.Level, Never>) {
        self._batteryLevel = batteryLevel
    }


    private(set) var batteryLevelSetCallCount = 0
    private var _batteryLevel: AnyPublisher<Battery.Level, Never>!  { didSet { batteryLevelSetCallCount += 1 } }
    var batteryLevel: AnyPublisher<Battery.Level, Never> {
        get { return _batteryLevel }
        set { _batteryLevel = newValue }
    }
}

class BatteryStateStreamingMock: BatteryStateStreaming {
    init() { }
    init(batteryState: AnyPublisher<Battery.State, Never>) {
        self._batteryState = batteryState
    }


    private(set) var batteryStateSetCallCount = 0
    private var _batteryState: AnyPublisher<Battery.State, Never>!  { didSet { batteryStateSetCallCount += 1 } }
    var batteryState: AnyPublisher<Battery.State, Never> {
        get { return _batteryState }
        set { _batteryState = newValue }
    }
}

class DeviceIdentityPresentableMock: DeviceIdentityPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: DeviceIdentityPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: DeviceIdentityPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var applyCallCount = 0
    var applyHandler: ((DeviceIdentityViewModel) -> ())?
    func apply(viewModel: DeviceIdentityViewModel)  {
        applyCallCount += 1
        if let applyHandler = applyHandler {
            applyHandler(viewModel)
        }
        
    }
}

class MainPresentableMock: MainPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: MainPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: MainPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(_ viewController: ViewControllable)  {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(viewController)
        }
        
    }

    private(set) var showTabsCallCount = 0
    var showTabsHandler: (([MainTabViewModel]) -> ())?
    func showTabs(_ models: [MainTabViewModel])  {
        showTabsCallCount += 1
        if let showTabsHandler = showTabsHandler {
            showTabsHandler(models)
        }
        
    }

    private(set) var activateTabCallCount = 0
    var activateTabHandler: ((Int) -> ())?
    func activateTab(_ id: Int)  {
        activateTabCallCount += 1
        if let activateTabHandler = activateTabHandler {
            activateTabHandler(id)
        }
        
    }
}

class DeviceIdentityViewControllableMock: DeviceIdentityViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MainViewControllableMock: MainViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MonitorListViewControllableMock: MonitorListViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class RootViewControllableMock: RootViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class DeviceBoardUpdateWorkingMock: DeviceBoardUpdateWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class DeviceModelUpdateWorkingMock: DeviceModelUpdateWorking {
    init() { }
    init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class MemoryViewControllableMock: MemoryViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class BatteryViewControllableMock: BatteryViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class CellularPresentableListenerMock: CellularPresentableListener {
    init() { }


}

class DiskPresentableListenerMock: DiskPresentableListener {
    init() { }


    private(set) var didTapBackCallCount = 0
    var didTapBackHandler: (() -> ())?
    func didTapBack()  {
        didTapBackCallCount += 1
        if let didTapBackHandler = didTapBackHandler {
            didTapBackHandler()
        }
        
    }
}

class WiFiPresentableListenerMock: WiFiPresentableListener {
    init() { }


}

class MonitorPresentableListenerMock: MonitorPresentableListener {
    init() { }


}

class ReporterPresentableListenerMock: ReporterPresentableListener {
    init() { }


}

class SettingsPresentableListenerMock: SettingsPresentableListener {
    init() { }


}

class ProcessorPresentableListenerMock: ProcessorPresentableListener {
    init() { }


    private(set) var didTapBackCallCount = 0
    var didTapBackHandler: (() -> ())?
    func didTapBack()  {
        didTapBackCallCount += 1
        if let didTapBackHandler = didTapBackHandler {
            didTapBackHandler()
        }
        
    }
}

class MainPresentableListenerMock: MainPresentableListener {
    init() { }


    private(set) var didSelectTabCallCount = 0
    var didSelectTabHandler: ((Int) -> ())?
    func didSelectTab(withTag tag: Int)  {
        didSelectTabCallCount += 1
        if let didSelectTabHandler = didSelectTabHandler {
            didSelectTabHandler(tag)
        }
        
    }
}

class RootPresentableListenerMock: RootPresentableListener {
    init() { }


}

class MutableDeviceModelStoringMock: MutableDeviceModelStoring {
    init() { }


    private(set) var retrieveCachedModelsCallCount = 0
    var retrieveCachedModelsHandler: (() throws -> ([DeviceModel]))?
    func retrieveCachedModels() throws -> [DeviceModel] {
        retrieveCachedModelsCallCount += 1
        if let retrieveCachedModelsHandler = retrieveCachedModelsHandler {
            return try retrieveCachedModelsHandler()
        }
        return [DeviceModel]()
    }

    private(set) var storeModelsCallCount = 0
    var storeModelsHandler: (([DeviceModel]) throws -> ())?
    func storeModels(_ models: [DeviceModel]) throws  {
        storeModelsCallCount += 1
        if let storeModelsHandler = storeModelsHandler {
            try storeModelsHandler(models)
        }
        
    }
}

class MonitorListPresentableListenerMock: MonitorListPresentableListener {
    init() { }


    private(set) var didSelectMonitorCallCount = 0
    var didSelectMonitorHandler: ((MonitorIdentifier) -> ())?
    func didSelectMonitor(withIdentifier identifier: MonitorIdentifier)  {
        didSelectMonitorCallCount += 1
        if let didSelectMonitorHandler = didSelectMonitorHandler {
            didSelectMonitorHandler(identifier)
        }
        
    }
}

class MutableDiskSnapshotStreamingMock: MutableDiskSnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<DiskSnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<DiskSnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<DiskSnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }

    private(set) var sendCallCount = 0
    var sendHandler: ((DiskSnapshot) -> ())?
    func send(snapshot: DiskSnapshot)  {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(snapshot)
        }
        
    }
}

class DeviceIdentityPresentableListenerMock: DeviceIdentityPresentableListener {
    init() { }


    private(set) var didTapBackCallCount = 0
    var didTapBackHandler: (() -> ())?
    func didTapBack()  {
        didTapBackCallCount += 1
        if let didTapBackHandler = didTapBackHandler {
            didTapBackHandler()
        }
        
    }
}

class WiFiListenerMock: WiFiListener {
    init() { }


}

class AppStateManagingMock: AppStateManaging {
    init() { }
    init(state: AnyPublisher<AppState, Never>) {
        self._state = state
    }


    private(set) var stateSetCallCount = 0
    private var _state: AnyPublisher<AppState, Never>!  { didSet { stateSetCallCount += 1 } }
    var state: AnyPublisher<AppState, Never> {
        get { return _state }
        set { _state = newValue }
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((AppState) -> ())?
    func update(state: AppState)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(state)
        }
        
    }
}

class MemoryPresentableListenerMock: MemoryPresentableListener {
    init() { }


    private(set) var didTapBackCallCount = 0
    var didTapBackHandler: (() -> ())?
    func didTapBack()  {
        didTapBackCallCount += 1
        if let didTapBackHandler = didTapBackHandler {
            didTapBackHandler()
        }
        
    }
}

class MutableDeviceBoardStoringMock: MutableDeviceBoardStoring {
    init() { }


    private(set) var retrieveCachedBoardsCallCount = 0
    var retrieveCachedBoardsHandler: (() throws -> ([DeviceBoard]))?
    func retrieveCachedBoards() throws -> [DeviceBoard] {
        retrieveCachedBoardsCallCount += 1
        if let retrieveCachedBoardsHandler = retrieveCachedBoardsHandler {
            return try retrieveCachedBoardsHandler()
        }
        return [DeviceBoard]()
    }

    private(set) var storeBoardsCallCount = 0
    var storeBoardsHandler: (([DeviceBoard]) throws -> ())?
    func storeBoards(_ boards: [DeviceBoard]) throws  {
        storeBoardsCallCount += 1
        if let storeBoardsHandler = storeBoardsHandler {
            try storeBoardsHandler(boards)
        }
        
    }
}

class BatteryPresentableListenerMock: BatteryPresentableListener {
    init() { }


    private(set) var didTapBackCallCount = 0
    var didTapBackHandler: (() -> ())?
    func didTapBack()  {
        didTapBackCallCount += 1
        if let didTapBackHandler = didTapBackHandler {
            didTapBackHandler()
        }
        
    }
}

class CellularListenerMock: CellularListener {
    init() { }


}

class ReporterListenerMock: ReporterListener {
    init() { }


}

class SettingsListenerMock: SettingsListener {
    init() { }


}

class MutableDeviceBoardStreamingMock: MutableDeviceBoardStreaming {
    init() { }
    init(boards: AnyPublisher<[DeviceBoard], Never>) {
        self._boards = boards
    }


    private(set) var boardsSetCallCount = 0
    private var _boards: AnyPublisher<[DeviceBoard], Never>!  { didSet { boardsSetCallCount += 1 } }
    var boards: AnyPublisher<[DeviceBoard], Never> {
        get { return _boards }
        set { _boards = newValue }
    }

    private(set) var updateCallCount = 0
    var updateHandler: (([DeviceBoard]) -> ())?
    func update(boards: [DeviceBoard])  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(boards)
        }
        
    }
}

class MutableMemorySnapshotStreamingMock: MutableMemorySnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<MemorySnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<MemorySnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<MemorySnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }

    private(set) var sendCallCount = 0
    var sendHandler: ((MemorySnapshot) -> ())?
    func send(snapshot: MemorySnapshot)  {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(snapshot)
        }
        
    }
}

public class MutableDeviceModelStreamingMock: MutableDeviceModelStreaming {
    public init() { }
    public init(models: AnyPublisher<[DeviceModel], Never>) {
        self._models = models
    }


    public private(set) var modelsSetCallCount = 0
    private var _models: AnyPublisher<[DeviceModel], Never>!  { didSet { modelsSetCallCount += 1 } }
    public var models: AnyPublisher<[DeviceModel], Never> {
        get { return _models }
        set { _models = newValue }
    }

    public private(set) var updateCallCount = 0
    public var updateHandler: (([DeviceModel]) -> ())?
    public func update(models: [DeviceModel])  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(models)
        }
        
    }
}

class DiskProvidingMock: DiskProviding {
    init() { }


    private(set) var recordCallCount = 0
    var recordHandler: (() throws -> (Disk.Usage))?
    func record() throws -> Disk.Usage {
        recordCallCount += 1
        if let recordHandler = recordHandler {
            return try recordHandler()
        }
        fatalError("recordHandler returns can't have a default value thus its handler must be set")
    }
}

class MutableProcessorSnapshotStreamingMock: MutableProcessorSnapshotStreaming {
    init() { }
    init(snapshots: AnyPublisher<ProcessorSnapshot, Never>) {
        self._snapshots = snapshots
    }


    private(set) var snapshotsSetCallCount = 0
    private var _snapshots: AnyPublisher<ProcessorSnapshot, Never>!  { didSet { snapshotsSetCallCount += 1 } }
    var snapshots: AnyPublisher<ProcessorSnapshot, Never> {
        get { return _snapshots }
        set { _snapshots = newValue }
    }

    private(set) var sendCallCount = 0
    var sendHandler: ((ProcessorSnapshot) -> ())?
    func send(snapshot: ProcessorSnapshot)  {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(snapshot)
        }
        
    }
}

class MutableBatteryLevelStreamingMock: MutableBatteryLevelStreaming {
    init() { }
    init(batteryLevel: AnyPublisher<Battery.Level, Never>) {
        self._batteryLevel = batteryLevel
    }


    private(set) var batteryLevelSetCallCount = 0
    private var _batteryLevel: AnyPublisher<Battery.Level, Never>!  { didSet { batteryLevelSetCallCount += 1 } }
    var batteryLevel: AnyPublisher<Battery.Level, Never> {
        get { return _batteryLevel }
        set { _batteryLevel = newValue }
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((Battery.Level) -> ())?
    func update(level: Battery.Level)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(level)
        }
        
    }
}

class MutableBatteryStateStreamingMock: MutableBatteryStateStreaming {
    init() { }
    init(batteryState: AnyPublisher<Battery.State, Never>) {
        self._batteryState = batteryState
    }


    private(set) var batteryStateSetCallCount = 0
    private var _batteryState: AnyPublisher<Battery.State, Never>!  { didSet { batteryStateSetCallCount += 1 } }
    var batteryState: AnyPublisher<Battery.State, Never> {
        get { return _batteryState }
        set { _batteryState = newValue }
    }

    private(set) var updateCallCount = 0
    var updateHandler: ((Battery.State) -> ())?
    func update(batteryState: Battery.State)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(batteryState)
        }
        
    }
}

public class AnalyticsManagingMock: AnalyticsManaging {
    public init() { }


    public private(set) var sendCallCount = 0
    public var sendHandler: ((Any, [String: String]?, UInt, Double, TimeInterval) -> ())?
    public func send<T>(event: T, segmentation: [String: String]?, count: UInt, sum: Double, duration: TimeInterval)  where T: Analytics.Event {
        sendCallCount += 1
        if let sendHandler = sendHandler {
            sendHandler(event, segmentation, count, sum, duration)
        }
        
    }

    public private(set) var startCallCount = 0
    public var startHandler: ((Any) -> ())?
    public func start<T>(trace: T)  where T: Analytics.Trace {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(trace)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: ((Any, [String: String]?) -> ())?
    public func stop<T>(trace: T, segmentation: [String: String]?)  where T: Analytics.Trace {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler(trace, segmentation)
        }
        
    }

    public private(set) var cancelCallCount = 0
    public var cancelHandler: ((Any) -> ())?
    public func cancel<T>(trace: T)  where T: Analytics.Trace {
        cancelCallCount += 1
        if let cancelHandler = cancelHandler {
            cancelHandler(trace)
        }
        
    }
}

class DiskListenerMock: DiskListener {
    init() { }


    private(set) var diskDidCloseCallCount = 0
    var diskDidCloseHandler: (() -> ())?
    func diskDidClose()  {
        diskDidCloseCallCount += 1
        if let diskDidCloseHandler = diskDidCloseHandler {
            diskDidCloseHandler()
        }
        
    }
}

class ProcessorListenerMock: ProcessorListener {
    init() { }


    private(set) var processorDidCloseCallCount = 0
    var processorDidCloseHandler: (() -> ())?
    func processorDidClose()  {
        processorDidCloseCallCount += 1
        if let processorDidCloseHandler = processorDidCloseHandler {
            processorDidCloseHandler()
        }
        
    }
}

class WiFiInteractableMock: WiFiInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MemoryListenerMock: MemoryListener {
    init() { }


    private(set) var memoryDidCloseCallCount = 0
    var memoryDidCloseHandler: (() -> ())?
    func memoryDidClose()  {
        memoryDidCloseCallCount += 1
        if let memoryDidCloseHandler = memoryDidCloseHandler {
            memoryDidCloseHandler()
        }
        
    }
}

class CellularInteractableMock: CellularInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class ReporterInteractableMock: ReporterInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class SettingsInteractableMock: SettingsInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class BatteryListenerMock: BatteryListener {
    init() { }


    private(set) var batteryDidCloseCallCount = 0
    var batteryDidCloseHandler: (() -> ())?
    func batteryDidClose()  {
        batteryDidCloseCallCount += 1
        if let batteryDidCloseHandler = batteryDidCloseHandler {
            batteryDidCloseHandler()
        }
        
    }
}

class DeviceIdentityListenerMock: DeviceIdentityListener {
    init() { }


    private(set) var deviceIdentityDidCloseCallCount = 0
    var deviceIdentityDidCloseHandler: (() -> ())?
    func deviceIdentityDidClose()  {
        deviceIdentityDidCloseCallCount += 1
        if let deviceIdentityDidCloseHandler = deviceIdentityDidCloseHandler {
            deviceIdentityDidCloseHandler()
        }
        
    }
}

class MonitorListListenerMock: MonitorListListener {
    init() { }


    private(set) var monitorListDidSelectCallCount = 0
    var monitorListDidSelectHandler: ((MonitorIdentifier) -> ())?
    func monitorListDidSelect(identifier: MonitorIdentifier)  {
        monitorListDidSelectCallCount += 1
        if let monitorListDidSelectHandler = monitorListDidSelectHandler {
            monitorListDidSelectHandler(identifier)
        }
        
    }
}

class MonitorListenerMock: MonitorListener {
    init() { }


}

public class WorkingMock: Working {
    public init() { }
    public init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((Workable) -> ())?
    public func start(on scope: Workable)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class MainListenerMock: MainListener {
    init() { }


}

class WiFiBuildableMock: WiFiBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((WiFiListener) -> (PresentableInteractable))?
    func build(withListener listener: WiFiListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class CellularBuildableMock: CellularBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((CellularListener) -> (PresentableInteractable))?
    func build(withListener listener: CellularListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class ProcessorInteractableMock: ProcessorInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class ReporterBuildableMock: ReporterBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((ReporterListener) -> (PresentableInteractable))?
    func build(withListener listener: ReporterListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class SettingsBuildableMock: SettingsBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((SettingsListener) -> (PresentableInteractable))?
    func build(withListener listener: SettingsListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class ProcessorBuildableMock: ProcessorBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((ProcessorListener) -> (PresentableInteractable))?
    func build(withListener listener: ProcessorListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class DiskInteractableMock: DiskInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MemoryInteractableMock: MemoryInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class BatteryInteractableMock: BatteryInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class DeviceIdentityInteractableMock: DeviceIdentityInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class RootInteractableMock: RootInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class DiskBuildableMock: DiskBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((DiskListener) -> (PresentableInteractable))?
    func build(withListener listener: DiskListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class MonitorListInteractableMock: MonitorListInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>, viewController: MonitorListViewControllable = MonitorListViewControllableMock()) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
        self.viewController = viewController
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }

    private(set) var viewControllerSetCallCount = 0
    var viewController: MonitorListViewControllable = MonitorListViewControllableMock() { didSet { viewControllerSetCallCount += 1 } }
}

class MemoryBuildableMock: MemoryBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MemoryListener) -> (PresentableInteractable))?
    func build(withListener listener: MemoryListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class BatteryBuildableMock: BatteryBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((BatteryListener) -> (PresentableInteractable))?
    func build(withListener listener: BatteryListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class DeviceIdentityBuildableMock: DeviceIdentityBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((DeviceIdentityListener) -> (PresentableInteractable))?
    func build(withListener listener: DeviceIdentityListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class RootBuildableMock: RootBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((UIWindow, AnalyticsManaging) -> (PresentableInteractable))?
    func build(onWindow window: UIWindow, analyticsManager: AnalyticsManaging) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(window, analyticsManager)
        }
        return PresentableInteractableMock()
    }
}

class MonitorListBuildableMock: MonitorListBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MonitorListListener) -> (MonitorListInteractable))?
    func build(withListener listener: MonitorListListener) -> MonitorListInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return MonitorListInteractableMock()
    }
}

class MainInteractableMock: MainInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MainBuildableMock: MainBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MainListener) -> (PresentableInteractable))?
    func build(withListener listener: MainListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class MonitorInteractableMock: MonitorInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    private(set) var diskDidCloseCallCount = 0
    var diskDidCloseHandler: (() -> ())?
    func diskDidClose()  {
        diskDidCloseCallCount += 1
        if let diskDidCloseHandler = diskDidCloseHandler {
            diskDidCloseHandler()
        }
        
    }

    private(set) var processorDidCloseCallCount = 0
    var processorDidCloseHandler: (() -> ())?
    func processorDidClose()  {
        processorDidCloseCallCount += 1
        if let processorDidCloseHandler = processorDidCloseHandler {
            processorDidCloseHandler()
        }
        
    }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    private(set) var memoryDidCloseCallCount = 0
    var memoryDidCloseHandler: (() -> ())?
    func memoryDidClose()  {
        memoryDidCloseCallCount += 1
        if let memoryDidCloseHandler = memoryDidCloseHandler {
            memoryDidCloseHandler()
        }
        
    }

    private(set) var batteryDidCloseCallCount = 0
    var batteryDidCloseHandler: (() -> ())?
    func batteryDidClose()  {
        batteryDidCloseCallCount += 1
        if let batteryDidCloseHandler = batteryDidCloseHandler {
            batteryDidCloseHandler()
        }
        
    }

    private(set) var deviceIdentityDidCloseCallCount = 0
    var deviceIdentityDidCloseHandler: (() -> ())?
    func deviceIdentityDidClose()  {
        deviceIdentityDidCloseCallCount += 1
        if let deviceIdentityDidCloseHandler = deviceIdentityDidCloseHandler {
            deviceIdentityDidCloseHandler()
        }
        
    }

    private(set) var monitorListDidSelectCallCount = 0
    var monitorListDidSelectHandler: ((MonitorIdentifier) -> ())?
    func monitorListDidSelect(identifier: MonitorIdentifier)  {
        monitorListDidSelectCallCount += 1
        if let monitorListDidSelectHandler = monitorListDidSelectHandler {
            monitorListDidSelectHandler(identifier)
        }
        
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MonitorBuildableMock: MonitorBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MonitorListener) -> (PresentableInteractable))?
    func build(withListener listener: MonitorListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

